{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar Event =\n/** @class */\nfunction () {\n  function Event(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n\n  return Event;\n}();\n\nvar ErrorEvent =\n/** @class */\nfunction (_super) {\n  __extends(ErrorEvent, _super);\n\n  function ErrorEvent(error, target) {\n    var _this = _super.call(this, 'error', target) || this;\n\n    _this.message = error.message;\n    _this.error = error;\n    return _this;\n  }\n\n  return ErrorEvent;\n}(Event);\n\nvar CloseEvent =\n/** @class */\nfunction (_super) {\n  __extends(CloseEvent, _super);\n\n  function CloseEvent(code, reason, target) {\n    if (code === void 0) {\n      code = 1000;\n    }\n\n    if (reason === void 0) {\n      reason = '';\n    }\n\n    var _this = _super.call(this, 'close', target) || this;\n\n    _this.wasClean = true;\n    _this.code = code;\n    _this.reason = reason;\n    return _this;\n  }\n\n  return CloseEvent;\n}(Event);\n/*!\r\n * Reconnecting WebSocket\r\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\r\n * https://github.com/pladaria/reconnecting-websocket\r\n * License MIT\r\n */\n\n\nvar getGlobalWebSocket = function getGlobalWebSocket() {\n  if (typeof WebSocket !== 'undefined') {\n    // @ts-ignore\n    return WebSocket;\n  }\n};\n/**\r\n * Returns true if given argument looks like a WebSocket class\r\n */\n\n\nvar isWebSocket = function isWebSocket(w) {\n  return typeof w === 'function' && w.CLOSING === 2;\n};\n\nvar DEFAULT = {\n  maxReconnectionDelay: 10000,\n  minReconnectionDelay: 1000 + Math.random() * 4000,\n  minUptime: 5000,\n  reconnectionDelayGrowFactor: 1.3,\n  connectionTimeout: 4000,\n  maxRetries: Infinity,\n  debug: false\n};\n\nvar ReconnectingWebSocket =\n/** @class */\nfunction () {\n  function ReconnectingWebSocket(url, protocols, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = this;\n\n    this._listeners = {\n      error: [],\n      message: [],\n      open: [],\n      close: []\n    };\n    this._retryCount = -1;\n    this._shouldReconnect = true;\n    this._connectLock = false;\n    this._binaryType = 'blob';\n    this._closeCalled = false;\n    this._messageQueue = [];\n    /**\r\n     * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\r\n     */\n\n    this.onclose = undefined;\n    /**\r\n     * An event listener to be called when an error occurs\r\n     */\n\n    this.onerror = undefined;\n    /**\r\n     * An event listener to be called when a message is received from the server\r\n     */\n\n    this.onmessage = undefined;\n    /**\r\n     * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\r\n     * this indicates that the connection is ready to send and receive data\r\n     */\n\n    this.onopen = undefined;\n\n    this._handleOpen = function (event) {\n      _this._debug('open event');\n\n      var _a = _this._options.minUptime,\n          minUptime = _a === void 0 ? DEFAULT.minUptime : _a;\n      clearTimeout(_this._connectTimeout);\n      _this._uptimeTimeout = setTimeout(function () {\n        return _this._acceptOpen();\n      }, minUptime); // @ts-ignore\n\n      _this._ws.binaryType = _this._binaryType; // send enqueued messages (messages sent before websocket open event)\n\n      _this._messageQueue.forEach(function (message) {\n        return _this._ws.send(message);\n      });\n\n      _this._messageQueue = [];\n\n      if (_this.onopen) {\n        _this.onopen(event);\n      }\n\n      _this._listeners.open.forEach(function (listener) {\n        return _this._callEventListener(event, listener);\n      });\n    };\n\n    this._handleMessage = function (event) {\n      _this._debug('message event');\n\n      if (_this.onmessage) {\n        _this.onmessage(event);\n      }\n\n      _this._listeners.message.forEach(function (listener) {\n        return _this._callEventListener(event, listener);\n      });\n    };\n\n    this._handleError = function (event) {\n      _this._debug('error event', event.message);\n\n      _this._disconnect(undefined, event.message === 'TIMEOUT' ? 'timeout' : undefined);\n\n      if (_this.onerror) {\n        _this.onerror(event);\n      }\n\n      _this._debug('exec error listeners');\n\n      _this._listeners.error.forEach(function (listener) {\n        return _this._callEventListener(event, listener);\n      });\n\n      _this._connect();\n    };\n\n    this._handleClose = function (event) {\n      _this._debug('close event');\n\n      _this._clearTimeouts();\n\n      if (_this._shouldReconnect) {\n        _this._connect();\n      }\n\n      if (_this.onclose) {\n        _this.onclose(event);\n      }\n\n      _this._listeners.close.forEach(function (listener) {\n        return _this._callEventListener(event, listener);\n      });\n    };\n\n    this._url = url;\n    this._protocols = protocols;\n    this._options = options;\n\n    this._connect();\n  }\n\n  Object.defineProperty(ReconnectingWebSocket, \"CONNECTING\", {\n    get: function get() {\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket, \"OPEN\", {\n    get: function get() {\n      return 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket, \"CLOSING\", {\n    get: function get() {\n      return 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket, \"CLOSED\", {\n    get: function get() {\n      return 3;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"CONNECTING\", {\n    get: function get() {\n      return ReconnectingWebSocket.CONNECTING;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"OPEN\", {\n    get: function get() {\n      return ReconnectingWebSocket.OPEN;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"CLOSING\", {\n    get: function get() {\n      return ReconnectingWebSocket.CLOSING;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"CLOSED\", {\n    get: function get() {\n      return ReconnectingWebSocket.CLOSED;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"binaryType\", {\n    get: function get() {\n      return this._ws ? this._ws.binaryType : this._binaryType;\n    },\n    set: function set(value) {\n      this._binaryType = value;\n\n      if (this._ws) {\n        // @ts-ignore\n        this._ws.binaryType = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"retryCount\", {\n    /**\r\n     * Returns the number or connection retries\r\n     */\n    get: function get() {\n      return Math.max(this._retryCount, 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"bufferedAmount\", {\n    /**\r\n     * The number of bytes of data that have been queued using calls to send() but not yet\r\n     * transmitted to the network. This value resets to zero once all queued data has been sent.\r\n     * This value does not reset to zero when the connection is closed; if you keep calling send(),\r\n     * this will continue to climb. Read only\r\n     */\n    get: function get() {\n      var bytes = this._messageQueue.reduce(function (acc, message) {\n        if (typeof message === 'string') {\n          acc += message.length; // not byte size\n        } else if (message instanceof Blob) {\n          acc += message.size;\n        } else {\n          acc += message.byteLength;\n        }\n\n        return acc;\n      }, 0);\n\n      return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"extensions\", {\n    /**\r\n     * The extensions selected by the server. This is currently only the empty string or a list of\r\n     * extensions as negotiated by the connection\r\n     */\n    get: function get() {\n      return this._ws ? this._ws.extensions : '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"protocol\", {\n    /**\r\n     * A string indicating the name of the sub-protocol the server selected;\r\n     * this will be one of the strings specified in the protocols parameter when creating the\r\n     * WebSocket object\r\n     */\n    get: function get() {\n      return this._ws ? this._ws.protocol : '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\n    /**\r\n     * The current state of the connection; this is one of the Ready state constants\r\n     */\n    get: function get() {\n      return this._ws ? this._ws.readyState : ReconnectingWebSocket.CONNECTING;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\n    /**\r\n     * The URL as resolved by the constructor\r\n     */\n    get: function get() {\n      return this._ws ? this._ws.url : '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Closes the WebSocket connection or connection attempt, if any. If the connection is already\r\n   * CLOSED, this method does nothing\r\n   */\n\n  ReconnectingWebSocket.prototype.close = function (code, reason) {\n    if (code === void 0) {\n      code = 1000;\n    }\n\n    this._closeCalled = true;\n    this._shouldReconnect = false;\n\n    this._clearTimeouts();\n\n    if (!this._ws) {\n      this._debug('close enqueued: no ws instance');\n\n      return;\n    }\n\n    if (this._ws.readyState === this.CLOSED) {\n      this._debug('close: already closed');\n\n      return;\n    }\n\n    this._ws.close(code, reason);\n  };\n  /**\r\n   * Closes the WebSocket connection or connection attempt and connects again.\r\n   * Resets retry counter;\r\n   */\n\n\n  ReconnectingWebSocket.prototype.reconnect = function (code, reason) {\n    this._shouldReconnect = true;\n    this._closeCalled = false;\n    this._retryCount = -1;\n\n    if (!this._ws || this._ws.readyState === this.CLOSED) {\n      this._connect();\n    } else {\n      this._disconnect(code, reason);\n\n      this._connect();\n    }\n  };\n  /**\r\n   * Enqueue specified data to be transmitted to the server over the WebSocket connection\r\n   */\n\n\n  ReconnectingWebSocket.prototype.send = function (data) {\n    if (this._ws && this._ws.readyState === this.OPEN) {\n      this._debug('send', data);\n\n      this._ws.send(data);\n    } else {\n      this._debug('enqueue', data);\n\n      this._messageQueue.push(data);\n    }\n  };\n  /**\r\n   * Register an event handler of a specific event type\r\n   */\n\n\n  ReconnectingWebSocket.prototype.addEventListener = function (type, listener) {\n    if (this._listeners[type]) {\n      // @ts-ignore\n      this._listeners[type].push(listener);\n    }\n  };\n  /**\r\n   * Removes an event listener\r\n   */\n\n\n  ReconnectingWebSocket.prototype.removeEventListener = function (type, listener) {\n    if (this._listeners[type]) {\n      // @ts-ignore\n      this._listeners[type] = this._listeners[type].filter(function (l) {\n        return l !== listener;\n      });\n    }\n  };\n\n  ReconnectingWebSocket.prototype._debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (this._options.debug) {\n      // not using spread because compiled version uses Symbols\n      // tslint:disable-next-line\n      console.log.apply(console, ['RWS>'].concat(args));\n    }\n  };\n\n  ReconnectingWebSocket.prototype._getNextDelay = function () {\n    var _a = this._options,\n        _b = _a.reconnectionDelayGrowFactor,\n        reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b,\n        _c = _a.minReconnectionDelay,\n        minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c,\n        _d = _a.maxReconnectionDelay,\n        maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;\n    var delay = minReconnectionDelay;\n\n    if (this._retryCount > 0) {\n      delay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n\n      if (delay > maxReconnectionDelay) {\n        delay = maxReconnectionDelay;\n      }\n    }\n\n    this._debug('next delay', delay);\n\n    return delay;\n  };\n\n  ReconnectingWebSocket.prototype._wait = function () {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      setTimeout(resolve, _this._getNextDelay());\n    });\n  };\n\n  ReconnectingWebSocket.prototype._getNextUrl = function (urlProvider) {\n    if (typeof urlProvider === 'string') {\n      return Promise.resolve(urlProvider);\n    }\n\n    if (typeof urlProvider === 'function') {\n      var url = urlProvider();\n\n      if (typeof url === 'string') {\n        return Promise.resolve(url);\n      }\n\n      if (url.then) {\n        return url;\n      }\n    }\n\n    throw Error('Invalid URL');\n  };\n\n  ReconnectingWebSocket.prototype._connect = function () {\n    var _this = this;\n\n    if (this._connectLock || !this._shouldReconnect) {\n      return;\n    }\n\n    this._connectLock = true;\n    var _a = this._options,\n        _b = _a.maxRetries,\n        maxRetries = _b === void 0 ? DEFAULT.maxRetries : _b,\n        _c = _a.connectionTimeout,\n        connectionTimeout = _c === void 0 ? DEFAULT.connectionTimeout : _c,\n        _d = _a.WebSocket,\n        WebSocket = _d === void 0 ? getGlobalWebSocket() : _d;\n\n    if (this._retryCount >= maxRetries) {\n      this._debug('max retries reached', this._retryCount, '>=', maxRetries);\n\n      return;\n    }\n\n    this._retryCount++;\n\n    this._debug('connect', this._retryCount);\n\n    this._removeListeners();\n\n    if (!isWebSocket(WebSocket)) {\n      throw Error('No valid WebSocket class provided');\n    }\n\n    this._wait().then(function () {\n      return _this._getNextUrl(_this._url);\n    }).then(function (url) {\n      // close could be called before creating the ws\n      if (_this._closeCalled) {\n        _this._connectLock = false;\n        return;\n      }\n\n      _this._debug('connect', {\n        url: url,\n        protocols: _this._protocols\n      });\n\n      _this._ws = _this._protocols ? new WebSocket(url, _this._protocols) : new WebSocket(url); // @ts-ignore\n\n      _this._ws.binaryType = _this._binaryType;\n      _this._connectLock = false;\n\n      _this._addListeners();\n\n      _this._connectTimeout = setTimeout(function () {\n        return _this._handleTimeout();\n      }, connectionTimeout);\n    });\n  };\n\n  ReconnectingWebSocket.prototype._handleTimeout = function () {\n    this._debug('timeout event');\n\n    this._handleError(new ErrorEvent(Error('TIMEOUT'), this));\n  };\n\n  ReconnectingWebSocket.prototype._disconnect = function (code, reason) {\n    if (code === void 0) {\n      code = 1000;\n    }\n\n    this._clearTimeouts();\n\n    if (!this._ws) {\n      return;\n    }\n\n    this._removeListeners();\n\n    try {\n      this._ws.close(code, reason);\n\n      this._handleClose(new CloseEvent(code, reason, this));\n    } catch (error) {// ignore\n    }\n  };\n\n  ReconnectingWebSocket.prototype._acceptOpen = function () {\n    this._debug('accept open');\n\n    this._retryCount = 0;\n  };\n\n  ReconnectingWebSocket.prototype._callEventListener = function (event, listener) {\n    if ('handleEvent' in listener) {\n      // @ts-ignore\n      listener.handleEvent(event);\n    } else {\n      // @ts-ignore\n      listener(event);\n    }\n  };\n\n  ReconnectingWebSocket.prototype._removeListeners = function () {\n    if (!this._ws) {\n      return;\n    }\n\n    this._debug('removeListeners');\n\n    this._ws.removeEventListener('open', this._handleOpen);\n\n    this._ws.removeEventListener('close', this._handleClose);\n\n    this._ws.removeEventListener('message', this._handleMessage); // @ts-ignore\n\n\n    this._ws.removeEventListener('error', this._handleError);\n  };\n\n  ReconnectingWebSocket.prototype._addListeners = function () {\n    if (!this._ws) {\n      return;\n    }\n\n    this._debug('addListeners');\n\n    this._ws.addEventListener('open', this._handleOpen);\n\n    this._ws.addEventListener('close', this._handleClose);\n\n    this._ws.addEventListener('message', this._handleMessage); // @ts-ignore\n\n\n    this._ws.addEventListener('error', this._handleError);\n  };\n\n  ReconnectingWebSocket.prototype._clearTimeouts = function () {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._uptimeTimeout);\n  };\n\n  return ReconnectingWebSocket;\n}();\n\nexport default ReconnectingWebSocket;","map":null,"metadata":{},"sourceType":"module"}